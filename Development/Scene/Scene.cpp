#include "Scene.h"
#include"../Objects/Player/Player.h"
#include"../Objects/Enemy/Enemy.h"
#include"../Objects/Enemy/Enemy2.h"
#include"../Objects/Enemy/Enemy3.h"
#include"../Objects/Enemy/Harpy.h"
#include"../Objects/Enemy/EnemyBullet.h"
#include"../Objects/bakudan/bakudan.h"
#include"../Utility/InputConttrol.h"
#include"../Objects/taimu.h"
#include"DxLib.h"

#define D_PIVOT_CENTER

//コンストラクタ
Scene::Scene() :objects()
{
	
}

Scene::~Scene()
{
	//忘れ防止
	Finalize();
}
//初期化処理
void Scene::Initialize()
{
	//プレイヤーを生成する
	CreateObject<Player>(Vector2D(320.0f,90.0f));
	CreateObject<taimu>(Vector2D());


	//背景よみこみ
	background = LoadGraph("Resource/Images/BackGround.png");
	


	if (background == -1)
	{
		throw("Resource/images/BacGroundがありません\n");
	}

}



//更新処理
void Scene::Update()
{
	//シーンに存在するオブジェクトの更新処理
	for (GameObject* obj : objects)
	{
		obj->Update();
	}



	//オブジェクト同士の当たり判定
	for (int i = 0;i < objects.size();i++)
	{
		for (int j = i + 1;j < objects.size();j++)
		{
			//当たり判定
			HitCheckObject(objects[i], objects[j]);
		}
	}
	for (int i = 0;i <= 3;i++)
	{
		Enemy_count[i]++;
	}

	//敵を生成する
	if(Enemy_count[0]>=150)
	{
		Enemy_count[0] = 0;

		if (GetRand(1) == 1)
		{
			CreateObject<Enemy>(Vector2D(630.0f, 0.0f));
		}
		else
			CreateObject<Enemy>(Vector2D(1.0f, 0.0f));
	}
	if (Enemy_count[1]>=500)
	{
		Enemy_count[1] = 1;
		//CreateObject<Enemy2>(Vector2D(100.0f, 400.0f));

		if (GetRand(1) == 1)
		{
			CreateObject<Enemy2>(Vector2D(630.0f, 0.0f));
		}
		else
			CreateObject<Enemy2>(Vector2D(1.0f, 0.0f));
	}
	if (Enemy_count[2] >= 500)
	{
		Enemy_count[2] = 2;

		if (GetRand(1) == 1)
		{
			CreateObject<Enemy3>(Vector2D(630.0f, 0.0f));
		}
		else
			CreateObject<Enemy3>(Vector2D(1.0f, 0.0f));
	}
	if (Enemy_count[3] >= 500)
	{
		Enemy_count[3] = 3;
		if (GetRand(1) == 1)
		{
			CreateObject<Harpy>(Vector2D(630.0f, 0.0f));
		}
		else
			CreateObject<Harpy>(Vector2D(1.0f, 0.0f));
	}

	//スペースキーを押したら爆弾を生成
	if (InputControl::GetKeyDown(KEY_INPUT_SPACE))
	{
		CreateObject<bakudan>(Vector2D(objects[0]->GetLocation()));
	}



	for (int i = 0;i<objects.size();i++)
	{
		if (objects[i]->Deleteobj() == true)
		{
			objects.erase(objects.begin() + i--);
		}
	}
	for (int i = 0 ; i < objects.size();i++)
	{
		if (dynamic_cast<Enemy*>(objects[i]) != nullptr)
		{
			if (InputControl::GetKeyDown(KEY_INPUT_B))
			{
				CreateObject<EnemyBullet>(Vector2D(objects[i]->GetLocation()));
			}
		}
	}
	

}

void Scene::Draw()const
{

//背景呼び出し
	DrawExtendGraph(0, 0,640,480, background, FALSE);

	//シーンに存在するオブジェクトの描画処理
	for (GameObject* obj : objects)
	{
		obj->Draw();
	}
	
}

void Scene::Finalize()
{
	//動的配列が空なら処理を終了する
	if (objects.empty())
	{
		return;
	}
	//各オブジェクトを削除する
	for (GameObject* obj : objects)
	{
		obj->Finalize();
		delete obj;
	}
	//動的配列の解放
	objects.clear();
}
#ifdef D_PIVOT_CENTER
//当たり判定チェック処理（短形の中心であたりはんていを取る）
void Scene::HitCheckObject(GameObject* a, GameObject* b)
{
	//2つのオブジェクトの距離取得
	Vector2D diff = a->GetLocation() - b->GetLocation();

	//2つのオブジェクトの当たり判定の大きさを取得
	Vector2D box_size = (a->GetBoxSize() + b->GetBoxSize()) / 2.0f;

	//距離よりも大きさが大きい場合、Hit判定する
	if ((fabs(diff.x) < box_size.x) && (fabsf(diff.y) < box_size.y))
	{
		//当たったことをオブジェクトに通知する
		a->OnHitCollision(b);
		b->OnHitCollision(a);
	}
}
#else
//当たり判定チェック処理（左上頂点の座標空当たり判定計算を行う）

void Scene::HitChecKObject(GameObject* a, GameObject* b)
{
	//右下頂点座標を取得する
	Vector2D a_lower_right = a->GetLocation() + a->GetBoxSize();
	Vector2D b_lower_right = b->GetLocation() + b->GetBoxSize();

	//短形Aと短形Bの位置関係を調べる
	if ((a->GetLocation().x < b_lower_right.x) &&
		(a->GetLocation().y < b_lower_right.y) &&
		(a_lower_right.x > b->GetLocation().x) &&
		(a_lower_right.y > b->GetLocation().y))
	{
		//オブジェクトに対してHit判定を通知する
		a->OnHitCollision(b);
		b->OnHitCollision(a);
	}
}
#endif  //D_PIVOT_CNETER